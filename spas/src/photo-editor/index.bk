<html>

<head>
  <title>PicEditor</title>
  <meta charset="utf-8">
  <meta name="viewport"
    content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no">
  <script>
    class App {

      init() {
        document.getElementById('file').onchange = (e) => {
          var file = e.target.files[0];
          if (file) {
            this.openFile(file);
          }
        }
        this.editedFile = document.getElementById('editedFile');
        var edits = [
          { title: "测试", f: () => this.test() },
          { title: "红色", f: () => this.setRed() },
          { title: "绿色", f: () => this.addRed() },
          { title: "重置", f: () => this.resetImage() },
        ];
        var header = document.getElementById('header');
        edits.forEach(e => {
          var btn = document.createElement('input');
          btn.type = 'button';
          btn.value = e.title;
          btn.onclick = e.f;
          header.appendChild(btn);
        })
      }

      getImgData(file) {
        return new Promise((resolve, reject) => {
          var reader = new FileReader();
          reader.onload = (e) => {
            var img = document.createElement('img');
            img.src = e.target.result;//解码前
            img.onload = e => {
              var canvas = document.createElement('canvas');
              canvas.width = img.naturalWidth;
              canvas.height = img.naturalHeight;
              var ctx = canvas.getContext("2d");
              ctx.drawImage(img, 0, 0);
              //解码后
              var imgData = ctx.getImageData(0, 0, img.naturalWidth, img.naturalHeight);
              resolve(imgData);
            }
          }
          reader.onerror = (e) => {
            reject(e.target.error);
          }
          reader.readAsDataURL(file);
        })
      }

      cloneImgData(imgData) {
        var newImgData = new ImageData(new Uint8ClampedArray(imgData.data), imgData.width, imgData.height);
        return newImgData;
      }

      async  openFile(file) {
        this.oriImageData = await this.getImgData(file);
        this.resetImage();
      }

      resetImage() {
        if (!this.oriImageData) {
          return;
        }
        this.setEditedImgData(this.cloneImgData(this.oriImageData));
      }

      setRed() {
        if (!this.editedImgData) {
          return
        }
        for (var i = 0; i < this.editedImgData.height; i += 2) {
          for (var j = 0; j < this.editedImgData.width; j += 2) {
            var idx = (i * this.editedImgData.width + j) * 4;
            this.editedImgData.data[idx + 1] = 0;
            this.editedImgData.data[idx + 2] = 0;
          }
        }
        this.setEditedImgData(this.editedImgData);
      }

      // _getArage = (index = 0, data = [], imgData) => {
      //   return data.reduce((sum, { w, h }) => {
      //     let id = (h * imgData.width + w) * 4
      //     return sum + imgData.data[id + index]
      //   }, 0) / (data.length ? data.length : 1)
      // }

      test() {
        if (!this.editedImgData) {
          return
        }
        console.time();
        let newImgData = new ImageData(this.editedImgData.width, this.editedImgData.height)
        let dw = 4;
        for (var i = dw; i < newImgData.height - dw; i += 1) {
          for (var j = dw; j < newImgData.width - dw; j += 1) {
            let indx = (i * newImgData.width + j) * 4
            let r = 0;
            let g = 0;
            let b = 0;
            let a = 0;
            let count = 0;
            for (let h = i - dw; h <= i + dw; h++) {
              for (let w = j - dw; w <= j + dw; w++) {
                let id = (h * this.editedImgData.width + w) * 4;
                let weight = 3 * dw - Math.abs(h - i) - Math.abs(w - j);
                r += this.editedImgData.data[id] * weight;
                g += this.editedImgData.data[id + 1] * weight;
                b += this.editedImgData.data[id + 2] * weight;
                a += this.editedImgData.data[id + 3] * weight;
                count += weight;
              }
            }
            newImgData.data[indx] = r / count;
            newImgData.data[indx + 1] = g / count;
            newImgData.data[indx + 2] = b / count;
            newImgData.data[indx + 3] = a / count;
          }
        }
        console.timeEnd();
        this.setEditedImgData(newImgData);
      }

      addRed() {
        if (!this.editedImgData) {
          return
        }
        var iOffset = Math.floor(this.editedImgData.height * 0.05);
        var jOffset = Math.floor(this.editedImgData.width * 0.05);
        var newImgData = new ImageData(this.editedImgData.width - jOffset,
          this.editedImgData.height - iOffset);
        for (var i = 0; i < newImgData.height; i++) {
          for (var j = 0; j < newImgData.width; j++) {
            var idx = (i * newImgData.width + j) * 4;
            var oidx = ((i) * this.editedImgData.width + j) * 4;
            var nidx = ((i + iOffset) * this.editedImgData.width + j + jOffset) * 4;
            newImgData.data[idx] = this.editedImgData.data[oidx];
            newImgData.data[idx + 1] = Math.floor(this.editedImgData.data[oidx + 1] + this.editedImgData.data[nidx + 1]) / 2
            newImgData.data[idx + 2] = this.editedImgData.data[oidx + 2]
            newImgData.data[idx + 3] = this.editedImgData.data[oidx + 3]
          }
        }
        this.setEditedImgData(newImgData);
      }

      setEditedImgData(imgData) {
        this.editedImgData = imgData;
        var canvas = this.editedFile;
        canvas.width = this.editedImgData.width;
        canvas.height = this.editedImgData.height;
        var ctx = canvas.getContext("2d");
        ctx.putImageData(this.editedImgData, 0, 0);
      }
    }

    window.onload = () => {
      window.app = new App();
      window.app.init()
    };
  </script>
</head>
<style>
  #app {
    display: flex;
    flex-direction: column;
  }

  #header {
    display: flex;
    align-items: center;
    margin: 10px;
  }

  #file {
    flex: 1;
  }

  #ediFiles {
    display: flex;
    flex-direction: column;
  }

  #editedFile {
    width: 100%;
  }
</style>

<body>
  <div id="app">
    <div id="header">
      <input type="file" id='file' />
    </div>
    <div id="ediFiles">
      <canvas id='editedFile'></canvas>
    </div>
  </div>
</body>

</html>