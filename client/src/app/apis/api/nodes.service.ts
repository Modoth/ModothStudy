/**
 * api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiResult } from '../model/apiResult';
import { ApiResultBlog } from '../model/apiResultBlog';
import { ApiResultGuid } from '../model/apiResultGuid';
import { ApiResultIEnumerableBlog } from '../model/apiResultIEnumerableBlog';
import { ApiResultIEnumerableNodeItem } from '../model/apiResultIEnumerableNodeItem';
import { ApiResultNodeDir } from '../model/apiResultNodeDir';
import { ApiResultNodeItem } from '../model/apiResultNodeItem';
import { ApiResultNodeTag } from '../model/apiResultNodeTag';
import { ApiResultPagedResultNodeItem } from '../model/apiResultPagedResultNodeItem';
import { Query } from '../model/query';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NodesService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param nodeId 
     * @param skip 
     * @param count 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allLevelNodes(nodeId: string, skip?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResultPagedResultNodeItem>;
    public allLevelNodes(nodeId: string, skip?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultPagedResultNodeItem>>;
    public allLevelNodes(nodeId: string, skip?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultPagedResultNodeItem>>;
    public allLevelNodes(nodeId: string, skip?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nodeId === null || nodeId === undefined) {
            throw new Error('Required parameter nodeId was null or undefined when calling allLevelNodes.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultPagedResultNodeItem>(`${this.basePath}/api/Nodes/AllLevelNodes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param name 
     * @param type 
     * @param parentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createNode(name: string, type: 'None' | 'Folder' | 'Blog' | 'Reference', parentId?: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResultNodeItem>;
    public createNode(name: string, type: 'None' | 'Folder' | 'Blog' | 'Reference', parentId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultNodeItem>>;
    public createNode(name: string, type: 'None' | 'Folder' | 'Blog' | 'Reference', parentId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultNodeItem>>;
    public createNode(name: string, type: 'None' | 'Folder' | 'Blog' | 'Reference', parentId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling createNode.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling createNode.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (parentId !== undefined && parentId !== null) {
            queryParameters = queryParameters.set('parentId', <any>parentId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultNodeItem>(`${this.basePath}/api/Nodes/CreateNode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param path 
     * @param content 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrUpdateBlogContent(path: string, content?: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public createOrUpdateBlogContent(path: string, content?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public createOrUpdateBlogContent(path: string, content?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public createOrUpdateBlogContent(path: string, content?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling createOrUpdateBlogContent.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (path !== undefined && path !== null) {
            queryParameters = queryParameters.set('path', <any>path);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ApiResult>(`${this.basePath}/api/Nodes/CreateOrUpdateBlogContent`,
            content,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param name 
     * @param parentId 
     * @param refId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRefNode(name?: string, parentId?: string, refId?: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResultNodeItem>;
    public createRefNode(name?: string, parentId?: string, refId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultNodeItem>>;
    public createRefNode(name?: string, parentId?: string, refId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultNodeItem>>;
    public createRefNode(name?: string, parentId?: string, refId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (parentId !== undefined && parentId !== null) {
            queryParameters = queryParameters.set('parentId', <any>parentId);
        }
        if (refId !== undefined && refId !== null) {
            queryParameters = queryParameters.set('refId', <any>refId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultNodeItem>(`${this.basePath}/api/Nodes/CreateRefNode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param blogId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTempBlogFiles(blogId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public deleteTempBlogFiles(blogId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public deleteTempBlogFiles(blogId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public deleteTempBlogFiles(blogId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling deleteTempBlogFiles.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ApiResult>(`${this.basePath}/api/Nodes/DeleteTempBlogFiles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param blogId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlog(blogId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResultBlog>;
    public getBlog(blogId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultBlog>>;
    public getBlog(blogId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultBlog>>;
    public getBlog(blogId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling getBlog.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultBlog>(`${this.basePath}/api/Nodes/GetBlog`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param blogId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlogCustomSolution(blogId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResultBlog>;
    public getBlogCustomSolution(blogId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultBlog>>;
    public getBlogCustomSolution(blogId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultBlog>>;
    public getBlogCustomSolution(blogId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling getBlogCustomSolution.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultBlog>(`${this.basePath}/api/Nodes/GetBlogCustomSolution`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param blogId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlogDefaultSolution(blogId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResultBlog>;
    public getBlogDefaultSolution(blogId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultBlog>>;
    public getBlogDefaultSolution(blogId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultBlog>>;
    public getBlogDefaultSolution(blogId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling getBlogDefaultSolution.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultBlog>(`${this.basePath}/api/Nodes/GetBlogDefaultSolution`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param blogId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlogSolutions(blogId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResultIEnumerableBlog>;
    public getBlogSolutions(blogId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultIEnumerableBlog>>;
    public getBlogSolutions(blogId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultIEnumerableBlog>>;
    public getBlogSolutions(blogId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling getBlogSolutions.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultIEnumerableBlog>(`${this.basePath}/api/Nodes/GetBlogSolutions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param tag 
     * @param tagValue 
     * @param count 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlogsByTag(tag: string, tagValue?: string, count?: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResultPagedResultNodeItem>;
    public getBlogsByTag(tag: string, tagValue?: string, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultPagedResultNodeItem>>;
    public getBlogsByTag(tag: string, tagValue?: string, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultPagedResultNodeItem>>;
    public getBlogsByTag(tag: string, tagValue?: string, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling getBlogsByTag.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tag !== undefined && tag !== null) {
            queryParameters = queryParameters.set('tag', <any>tag);
        }
        if (tagValue !== undefined && tagValue !== null) {
            queryParameters = queryParameters.set('tagValue', <any>tagValue);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultPagedResultNodeItem>(`${this.basePath}/api/Nodes/GetBlogsByTag`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param folderId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public move(nodeId?: string, folderId?: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public move(nodeId?: string, folderId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public move(nodeId?: string, folderId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public move(nodeId?: string, folderId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (folderId !== undefined && folderId !== null) {
            queryParameters = queryParameters.set('folderId', <any>folderId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResult>(`${this.basePath}/api/Nodes/Move`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param filter 
     * @param skip 
     * @param count 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nodeDir(nodeId?: string, filter?: string, skip?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResultNodeDir>;
    public nodeDir(nodeId?: string, filter?: string, skip?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultNodeDir>>;
    public nodeDir(nodeId?: string, filter?: string, skip?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultNodeDir>>;
    public nodeDir(nodeId?: string, filter?: string, skip?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultNodeDir>(`${this.basePath}/api/Nodes/NodeDir`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pathNodes(nodeId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResultIEnumerableNodeItem>;
    public pathNodes(nodeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultIEnumerableNodeItem>>;
    public pathNodes(nodeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultIEnumerableNodeItem>>;
    public pathNodes(nodeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nodeId === null || nodeId === undefined) {
            throw new Error('Required parameter nodeId was null or undefined when calling pathNodes.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultIEnumerableNodeItem>(`${this.basePath}/api/Nodes/PathNodes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param query 
     * @param filter 
     * @param skip 
     * @param count 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryNodes(query: Query, filter?: string, skip?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResultPagedResultNodeItem>;
    public queryNodes(query: Query, filter?: string, skip?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultPagedResultNodeItem>>;
    public queryNodes(query: Query, filter?: string, skip?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultPagedResultNodeItem>>;
    public queryNodes(query: Query, filter?: string, skip?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling queryNodes.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ApiResultPagedResultNodeItem>(`${this.basePath}/api/Nodes/QueryNodes`,
            query,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeNode(nodeId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public removeNode(nodeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public removeNode(nodeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public removeNode(nodeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nodeId === null || nodeId === undefined) {
            throw new Error('Required parameter nodeId was null or undefined when calling removeNode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ApiResult>(`${this.basePath}/api/Nodes/RemoveNode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param tagId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTag(nodeId: string, tagId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public removeTag(nodeId: string, tagId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public removeTag(nodeId: string, tagId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public removeTag(nodeId: string, tagId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nodeId === null || nodeId === undefined) {
            throw new Error('Required parameter nodeId was null or undefined when calling removeTag.');
        }

        if (tagId === null || tagId === undefined) {
            throw new Error('Required parameter tagId was null or undefined when calling removeTag.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (tagId !== undefined && tagId !== null) {
            queryParameters = queryParameters.set('tagId', <any>tagId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ApiResult>(`${this.basePath}/api/Nodes/RemoveTag/tags`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param newName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rename(nodeId?: string, newName?: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public rename(nodeId?: string, newName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public rename(nodeId?: string, newName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public rename(nodeId?: string, newName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (newName !== undefined && newName !== null) {
            queryParameters = queryParameters.set('newName', <any>newName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResult>(`${this.basePath}/api/Nodes/Rename`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param filter 
     * @param skip 
     * @param count 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subNodesOrFilterAllSubNodes(nodeId?: string, filter?: string, skip?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResultPagedResultNodeItem>;
    public subNodesOrFilterAllSubNodes(nodeId?: string, filter?: string, skip?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultPagedResultNodeItem>>;
    public subNodesOrFilterAllSubNodes(nodeId?: string, filter?: string, skip?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultPagedResultNodeItem>>;
    public subNodesOrFilterAllSubNodes(nodeId?: string, filter?: string, skip?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultPagedResultNodeItem>(`${this.basePath}/api/Nodes/SubNodesOrFilterAllSubNodes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param blogId 
     * @param content 
     * @param files 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBlogContent(blogId: string, content?: string, files?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public updateBlogContent(blogId: string, content?: string, files?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public updateBlogContent(blogId: string, content?: string, files?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public updateBlogContent(blogId: string, content?: string, files?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling updateBlogContent.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }
        if (files) {
            files.forEach((element) => {
                queryParameters = queryParameters.append('files', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ApiResult>(`${this.basePath}/api/Nodes/UpdateBlogContent`,
            content,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param blogId 
     * @param title 
     * @param content 
     * @param files 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBlogSolution(blogId: string, title?: string, content?: string, files?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<ApiResultGuid>;
    public updateBlogSolution(blogId: string, title?: string, content?: string, files?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultGuid>>;
    public updateBlogSolution(blogId: string, title?: string, content?: string, files?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultGuid>>;
    public updateBlogSolution(blogId: string, title?: string, content?: string, files?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling updateBlogSolution.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }
        if (title !== undefined && title !== null) {
            queryParameters = queryParameters.set('title', <any>title);
        }
        if (files) {
            files.forEach((element) => {
                queryParameters = queryParameters.append('files', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ApiResultGuid>(`${this.basePath}/api/Nodes/UpdateBlogSolution`,
            content,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param shared 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateNodeGroupShared(nodeId?: string, shared?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public updateNodeGroupShared(nodeId?: string, shared?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public updateNodeGroupShared(nodeId?: string, shared?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public updateNodeGroupShared(nodeId?: string, shared?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (shared !== undefined && shared !== null) {
            queryParameters = queryParameters.set('shared', <any>shared);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResult>(`${this.basePath}/api/Nodes/UpdateNodeGroupShared`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param published 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateNodePublished(nodeId?: string, published?: Date, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public updateNodePublished(nodeId?: string, published?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public updateNodePublished(nodeId?: string, published?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public updateNodePublished(nodeId?: string, published?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (published !== undefined && published !== null) {
            queryParameters = queryParameters.set('published', <any>published.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResult>(`${this.basePath}/api/Nodes/UpdateNodePublished`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param shared 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateNodeShared(nodeId?: string, shared?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public updateNodeShared(nodeId?: string, shared?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public updateNodeShared(nodeId?: string, shared?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public updateNodeShared(nodeId?: string, shared?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (shared !== undefined && shared !== null) {
            queryParameters = queryParameters.set('shared', <any>shared);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResult>(`${this.basePath}/api/Nodes/UpdateNodeShared`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param tagId 
     * @param value 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTag(nodeId: string, tagId: string, value?: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public updateTag(nodeId: string, tagId: string, value?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public updateTag(nodeId: string, tagId: string, value?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public updateTag(nodeId: string, tagId: string, value?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nodeId === null || nodeId === undefined) {
            throw new Error('Required parameter nodeId was null or undefined when calling updateTag.');
        }

        if (tagId === null || tagId === undefined) {
            throw new Error('Required parameter tagId was null or undefined when calling updateTag.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (tagId !== undefined && tagId !== null) {
            queryParameters = queryParameters.set('tagId', <any>tagId);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResult>(`${this.basePath}/api/Nodes/UpdateTag/tags`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param nodeId 
     * @param share 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWxShare(nodeId: string, share: boolean, observe?: 'body', reportProgress?: boolean): Observable<ApiResultNodeTag>;
    public updateWxShare(nodeId: string, share: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultNodeTag>>;
    public updateWxShare(nodeId: string, share: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultNodeTag>>;
    public updateWxShare(nodeId: string, share: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nodeId === null || nodeId === undefined) {
            throw new Error('Required parameter nodeId was null or undefined when calling updateWxShare.');
        }

        if (share === null || share === undefined) {
            throw new Error('Required parameter share was null or undefined when calling updateWxShare.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeId !== undefined && nodeId !== null) {
            queryParameters = queryParameters.set('nodeId', <any>nodeId);
        }
        if (share !== undefined && share !== null) {
            queryParameters = queryParameters.set('share', <any>share);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResultNodeTag>(`${this.basePath}/api/Nodes/UpdateWxShare/share`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
