/**
 * api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiResult } from '../model/apiResult';
import { ApiResultGuid } from '../model/apiResultGuid';
import { ApiResultPagedResultCommentItem } from '../model/apiResultPagedResultCommentItem';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CommentService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param blogId 
     * @param detail 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addComment(blogId: string, detail: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResultGuid>;
    public addComment(blogId: string, detail: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultGuid>>;
    public addComment(blogId: string, detail: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultGuid>>;
    public addComment(blogId: string, detail: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling addComment.');
        }

        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling addComment.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }
        if (detail !== undefined && detail !== null) {
            queryParameters = queryParameters.set('detail', <any>detail);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResultGuid>(`${this.basePath}/api/Comment/AddComment`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param commentId 
     * @param detail 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSubcomment(commentId: string, detail: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public addSubcomment(commentId: string, detail: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public addSubcomment(commentId: string, detail: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public addSubcomment(commentId: string, detail: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling addSubcomment.');
        }

        if (detail === null || detail === undefined) {
            throw new Error('Required parameter detail was null or undefined when calling addSubcomment.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (commentId !== undefined && commentId !== null) {
            queryParameters = queryParameters.set('commentId', <any>commentId);
        }
        if (detail !== undefined && detail !== null) {
            queryParameters = queryParameters.set('detail', <any>detail);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<ApiResult>(`${this.basePath}/api/Comment/AddSubcomment`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param commentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteComment(commentId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiResult>;
    public deleteComment(commentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResult>>;
    public deleteComment(commentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResult>>;
    public deleteComment(commentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling deleteComment.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (commentId !== undefined && commentId !== null) {
            queryParameters = queryParameters.set('commentId', <any>commentId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ApiResult>(`${this.basePath}/api/Comment/DeleteComment`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param blogId 
     * @param skip 
     * @param count 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlogComments(blogId: string, skip?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResultPagedResultCommentItem>;
    public getBlogComments(blogId: string, skip?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultPagedResultCommentItem>>;
    public getBlogComments(blogId: string, skip?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultPagedResultCommentItem>>;
    public getBlogComments(blogId: string, skip?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blogId === null || blogId === undefined) {
            throw new Error('Required parameter blogId was null or undefined when calling getBlogComments.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blogId !== undefined && blogId !== null) {
            queryParameters = queryParameters.set('blogId', <any>blogId);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultPagedResultCommentItem>(`${this.basePath}/api/Comment/GetBlogComments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param commentId 
     * @param skip 
     * @param count 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubcomments(commentId: string, skip?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<ApiResultPagedResultCommentItem>;
    public getSubcomments(commentId: string, skip?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResultPagedResultCommentItem>>;
    public getSubcomments(commentId: string, skip?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResultPagedResultCommentItem>>;
    public getSubcomments(commentId: string, skip?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling getSubcomments.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (commentId !== undefined && commentId !== null) {
            queryParameters = queryParameters.set('commentId', <any>commentId);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApiResultPagedResultCommentItem>(`${this.basePath}/api/Comment/GetSubcomments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
