/* 
 * api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing NodesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NodesApiTests
    {
        private NodesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NodesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NodesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NodesApi
            //Assert.IsInstanceOfType(typeof(NodesApi), instance, "instance is a NodesApi");
        }

        
        /// <summary>
        /// Test AllLevelNodes
        /// </summary>
        [Test]
        public void AllLevelNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //int? skip = null;
            //int? count = null;
            //var response = instance.AllLevelNodes(nodeId, skip, count);
            //Assert.IsInstanceOf<ApiResultPagedResultNodeItem> (response, "response is ApiResultPagedResultNodeItem");
        }
        
        /// <summary>
        /// Test CreateNode
        /// </summary>
        [Test]
        public void CreateNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string type = null;
            //Guid? parentId = null;
            //var response = instance.CreateNode(name, type, parentId);
            //Assert.IsInstanceOf<ApiResultNodeItem> (response, "response is ApiResultNodeItem");
        }
        
        /// <summary>
        /// Test CreateOrUpdateBlogContent
        /// </summary>
        [Test]
        public void CreateOrUpdateBlogContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string content = null;
            //var response = instance.CreateOrUpdateBlogContent(path, content);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test CreateRefNode
        /// </summary>
        [Test]
        public void CreateRefNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Guid? parentId = null;
            //Guid? refId = null;
            //var response = instance.CreateRefNode(name, parentId, refId);
            //Assert.IsInstanceOf<ApiResultNodeItem> (response, "response is ApiResultNodeItem");
        }
        
        /// <summary>
        /// Test DeleteTempBlogFiles
        /// </summary>
        [Test]
        public void DeleteTempBlogFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? blogId = null;
            //var response = instance.DeleteTempBlogFiles(blogId);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test GetBlog
        /// </summary>
        [Test]
        public void GetBlogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? blogId = null;
            //var response = instance.GetBlog(blogId);
            //Assert.IsInstanceOf<ApiResultBlog> (response, "response is ApiResultBlog");
        }
        
        /// <summary>
        /// Test GetBlogCustomSolution
        /// </summary>
        [Test]
        public void GetBlogCustomSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? blogId = null;
            //var response = instance.GetBlogCustomSolution(blogId);
            //Assert.IsInstanceOf<ApiResultBlog> (response, "response is ApiResultBlog");
        }
        
        /// <summary>
        /// Test GetBlogDefaultSolution
        /// </summary>
        [Test]
        public void GetBlogDefaultSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? blogId = null;
            //var response = instance.GetBlogDefaultSolution(blogId);
            //Assert.IsInstanceOf<ApiResultBlog> (response, "response is ApiResultBlog");
        }
        
        /// <summary>
        /// Test GetBlogSolutions
        /// </summary>
        [Test]
        public void GetBlogSolutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? blogId = null;
            //var response = instance.GetBlogSolutions(blogId);
            //Assert.IsInstanceOf<ApiResultIEnumerableBlog> (response, "response is ApiResultIEnumerableBlog");
        }
        
        /// <summary>
        /// Test GetBlogsByTag
        /// </summary>
        [Test]
        public void GetBlogsByTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //string tagValue = null;
            //int? count = null;
            //var response = instance.GetBlogsByTag(tag, tagValue, count);
            //Assert.IsInstanceOf<ApiResultPagedResultNodeItem> (response, "response is ApiResultPagedResultNodeItem");
        }
        
        /// <summary>
        /// Test Move
        /// </summary>
        [Test]
        public void MoveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //Guid? folderId = null;
            //var response = instance.Move(nodeId, folderId);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test NodeDir
        /// </summary>
        [Test]
        public void NodeDirTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //string filter = null;
            //int? skip = null;
            //int? count = null;
            //var response = instance.NodeDir(nodeId, filter, skip, count);
            //Assert.IsInstanceOf<ApiResultNodeDir> (response, "response is ApiResultNodeDir");
        }
        
        /// <summary>
        /// Test PathNodes
        /// </summary>
        [Test]
        public void PathNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //var response = instance.PathNodes(nodeId);
            //Assert.IsInstanceOf<ApiResultIEnumerableNodeItem> (response, "response is ApiResultIEnumerableNodeItem");
        }
        
        /// <summary>
        /// Test QueryNodes
        /// </summary>
        [Test]
        public void QueryNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Query query = null;
            //string filter = null;
            //int? skip = null;
            //int? count = null;
            //var response = instance.QueryNodes(query, filter, skip, count);
            //Assert.IsInstanceOf<ApiResultPagedResultNodeItem> (response, "response is ApiResultPagedResultNodeItem");
        }
        
        /// <summary>
        /// Test RemoveNode
        /// </summary>
        [Test]
        public void RemoveNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //var response = instance.RemoveNode(nodeId);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test RemoveTag
        /// </summary>
        [Test]
        public void RemoveTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //Guid? tagId = null;
            //var response = instance.RemoveTag(nodeId, tagId);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test Rename
        /// </summary>
        [Test]
        public void RenameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //string newName = null;
            //var response = instance.Rename(nodeId, newName);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test SubNodesOrFilterAllSubNodes
        /// </summary>
        [Test]
        public void SubNodesOrFilterAllSubNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //string filter = null;
            //int? skip = null;
            //int? count = null;
            //var response = instance.SubNodesOrFilterAllSubNodes(nodeId, filter, skip, count);
            //Assert.IsInstanceOf<ApiResultPagedResultNodeItem> (response, "response is ApiResultPagedResultNodeItem");
        }
        
        /// <summary>
        /// Test UpdateBlogContent
        /// </summary>
        [Test]
        public void UpdateBlogContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? blogId = null;
            //string content = null;
            //List<string> files = null;
            //var response = instance.UpdateBlogContent(blogId, content, files);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test UpdateBlogSolution
        /// </summary>
        [Test]
        public void UpdateBlogSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? blogId = null;
            //string title = null;
            //string content = null;
            //List<string> files = null;
            //var response = instance.UpdateBlogSolution(blogId, title, content, files);
            //Assert.IsInstanceOf<ApiResultGuid> (response, "response is ApiResultGuid");
        }
        
        /// <summary>
        /// Test UpdateNodeGroupShared
        /// </summary>
        [Test]
        public void UpdateNodeGroupSharedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //bool? shared = null;
            //var response = instance.UpdateNodeGroupShared(nodeId, shared);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test UpdateNodePublished
        /// </summary>
        [Test]
        public void UpdateNodePublishedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //DateTime? published = null;
            //var response = instance.UpdateNodePublished(nodeId, published);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test UpdateNodeShared
        /// </summary>
        [Test]
        public void UpdateNodeSharedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //bool? shared = null;
            //var response = instance.UpdateNodeShared(nodeId, shared);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test UpdateTag
        /// </summary>
        [Test]
        public void UpdateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //Guid? tagId = null;
            //string value = null;
            //var response = instance.UpdateTag(nodeId, tagId, value);
            //Assert.IsInstanceOf<ApiResult> (response, "response is ApiResult");
        }
        
        /// <summary>
        /// Test UpdateWxShare
        /// </summary>
        [Test]
        public void UpdateWxShareTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //bool? share = null;
            //var response = instance.UpdateWxShare(nodeId, share);
            //Assert.IsInstanceOf<ApiResultNodeTag> (response, "response is ApiResultNodeTag");
        }
        
    }

}
