/* 
 * api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NodeDir
    /// </summary>
    [DataContract]
    public partial class NodeDir :  IEquatable<NodeDir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeDir" /> class.
        /// </summary>
        /// <param name="subnodes">subnodes.</param>
        /// <param name="supnodes">supnodes.</param>
        public NodeDir(List<NodeItem> subnodes = default(List<NodeItem>), List<NodeItem> supnodes = default(List<NodeItem>))
        {
            this.Subnodes = subnodes;
            this.Supnodes = supnodes;
        }
        
        /// <summary>
        /// Gets or Sets Subnodes
        /// </summary>
        [DataMember(Name="subnodes", EmitDefaultValue=false)]
        public List<NodeItem> Subnodes { get; set; }

        /// <summary>
        /// Gets or Sets Supnodes
        /// </summary>
        [DataMember(Name="supnodes", EmitDefaultValue=false)]
        public List<NodeItem> Supnodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeDir {\n");
            sb.Append("  Subnodes: ").Append(Subnodes).Append("\n");
            sb.Append("  Supnodes: ").Append(Supnodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeDir);
        }

        /// <summary>
        /// Returns true if NodeDir instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeDir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeDir input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Subnodes == input.Subnodes ||
                    this.Subnodes != null &&
                    this.Subnodes.SequenceEqual(input.Subnodes)
                ) && 
                (
                    this.Supnodes == input.Supnodes ||
                    this.Supnodes != null &&
                    this.Supnodes.SequenceEqual(input.Supnodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subnodes != null)
                    hashCode = hashCode * 59 + this.Subnodes.GetHashCode();
                if (this.Supnodes != null)
                    hashCode = hashCode * 59 + this.Supnodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
