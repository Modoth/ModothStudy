/* 
 * api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NodeItem
    /// </summary>
    [DataContract]
    public partial class NodeItem :  IEquatable<NodeItem>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Folder for value: Folder
            /// </summary>
            [EnumMember(Value = "Folder")]
            Folder = 2,
            
            /// <summary>
            /// Enum Blog for value: Blog
            /// </summary>
            [EnumMember(Value = "Blog")]
            Blog = 3,
            
            /// <summary>
            /// Enum Reference for value: Reference
            /// </summary>
            [EnumMember(Value = "Reference")]
            Reference = 4
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="reference">reference.</param>
        /// <param name="created">created.</param>
        /// <param name="modified">modified.</param>
        /// <param name="name">name.</param>
        /// <param name="hasSolution">hasSolution.</param>
        /// <param name="solutionToId">solutionToId.</param>
        /// <param name="solutionTo">solutionTo.</param>
        /// <param name="path">path.</param>
        /// <param name="type">type.</param>
        /// <param name="user">user.</param>
        /// <param name="content">content.</param>
        /// <param name="shared">shared.</param>
        /// <param name="tags">tags.</param>
        public NodeItem(Guid? id = default(Guid?), NodeReference reference = default(NodeReference), DateTime? created = default(DateTime?), DateTime? modified = default(DateTime?), string name = default(string), bool? hasSolution = default(bool?), Guid? solutionToId = default(Guid?), string solutionTo = default(string), string path = default(string), TypeEnum? type = default(TypeEnum?), NodeUser user = default(NodeUser), string content = default(string), bool? shared = default(bool?), List<NodeTag> tags = default(List<NodeTag>))
        {
            this.Id = id;
            this.Reference = reference;
            this.Created = created;
            this.Modified = modified;
            this.Name = name;
            this.HasSolution = hasSolution;
            this.SolutionToId = solutionToId;
            this.SolutionTo = solutionTo;
            this.Path = path;
            this.Type = type;
            this.User = user;
            this.Content = content;
            this.Shared = shared;
            this.Tags = tags;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public NodeReference Reference { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets HasSolution
        /// </summary>
        [DataMember(Name="hasSolution", EmitDefaultValue=false)]
        public bool? HasSolution { get; set; }

        /// <summary>
        /// Gets or Sets SolutionToId
        /// </summary>
        [DataMember(Name="solutionToId", EmitDefaultValue=false)]
        public Guid? SolutionToId { get; set; }

        /// <summary>
        /// Gets or Sets SolutionTo
        /// </summary>
        [DataMember(Name="solutionTo", EmitDefaultValue=false)]
        public string SolutionTo { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }


        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public NodeUser User { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name="shared", EmitDefaultValue=false)]
        public bool? Shared { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<NodeTag> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HasSolution: ").Append(HasSolution).Append("\n");
            sb.Append("  SolutionToId: ").Append(SolutionToId).Append("\n");
            sb.Append("  SolutionTo: ").Append(SolutionTo).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeItem);
        }

        /// <summary>
        /// Returns true if NodeItem instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HasSolution == input.HasSolution ||
                    (this.HasSolution != null &&
                    this.HasSolution.Equals(input.HasSolution))
                ) && 
                (
                    this.SolutionToId == input.SolutionToId ||
                    (this.SolutionToId != null &&
                    this.SolutionToId.Equals(input.SolutionToId))
                ) && 
                (
                    this.SolutionTo == input.SolutionTo ||
                    (this.SolutionTo != null &&
                    this.SolutionTo.Equals(input.SolutionTo))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Shared == input.Shared ||
                    (this.Shared != null &&
                    this.Shared.Equals(input.Shared))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HasSolution != null)
                    hashCode = hashCode * 59 + this.HasSolution.GetHashCode();
                if (this.SolutionToId != null)
                    hashCode = hashCode * 59 + this.SolutionToId.GetHashCode();
                if (this.SolutionTo != null)
                    hashCode = hashCode * 59 + this.SolutionTo.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Shared != null)
                    hashCode = hashCode * 59 + this.Shared.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
