/* 
 * api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INodesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultPagedResultNodeItem</returns>
        ApiResultPagedResultNodeItem AllLevelNodes (Guid? nodeId, int? skip = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultPagedResultNodeItem</returns>
        ApiResponse<ApiResultPagedResultNodeItem> AllLevelNodesWithHttpInfo (Guid? nodeId, int? skip = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>ApiResultNodeItem</returns>
        ApiResultNodeItem CreateNode (string name, string type, Guid? parentId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>ApiResponse of ApiResultNodeItem</returns>
        ApiResponse<ApiResultNodeItem> CreateNodeWithHttpInfo (string name, string type, Guid? parentId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="content"> (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult CreateOrUpdateBlogContent (string path, string content = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="content"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> CreateOrUpdateBlogContentWithHttpInfo (string path, string content = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <param name="refId"> (optional)</param>
        /// <returns>ApiResultNodeItem</returns>
        ApiResultNodeItem CreateRefNode (string name = null, Guid? parentId = null, Guid? refId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <param name="refId"> (optional)</param>
        /// <returns>ApiResponse of ApiResultNodeItem</returns>
        ApiResponse<ApiResultNodeItem> CreateRefNodeWithHttpInfo (string name = null, Guid? parentId = null, Guid? refId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResult</returns>
        ApiResult DeleteTempBlogFiles (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> DeleteTempBlogFilesWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResultBlog</returns>
        ApiResultBlog GetBlog (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResultBlog</returns>
        ApiResponse<ApiResultBlog> GetBlogWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResultBlog</returns>
        ApiResultBlog GetBlogCustomSolution (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResultBlog</returns>
        ApiResponse<ApiResultBlog> GetBlogCustomSolutionWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResultBlog</returns>
        ApiResultBlog GetBlogDefaultSolution (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResultBlog</returns>
        ApiResponse<ApiResultBlog> GetBlogDefaultSolutionWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResultIEnumerableBlog</returns>
        ApiResultIEnumerableBlog GetBlogSolutions (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResultIEnumerableBlog</returns>
        ApiResponse<ApiResultIEnumerableBlog> GetBlogSolutionsWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="tagValue"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultPagedResultNodeItem</returns>
        ApiResultPagedResultNodeItem GetBlogsByTag (string tag, string tagValue = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="tagValue"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultPagedResultNodeItem</returns>
        ApiResponse<ApiResultPagedResultNodeItem> GetBlogsByTagWithHttpInfo (string tag, string tagValue = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult Move (Guid? nodeId = null, Guid? folderId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> MoveWithHttpInfo (Guid? nodeId = null, Guid? folderId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultNodeDir</returns>
        ApiResultNodeDir NodeDir (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultNodeDir</returns>
        ApiResponse<ApiResultNodeDir> NodeDirWithHttpInfo (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResultIEnumerableNodeItem</returns>
        ApiResultIEnumerableNodeItem PathNodes (Guid? nodeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResponse of ApiResultIEnumerableNodeItem</returns>
        ApiResponse<ApiResultIEnumerableNodeItem> PathNodesWithHttpInfo (Guid? nodeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultPagedResultNodeItem</returns>
        ApiResultPagedResultNodeItem QueryNodes (Query query, string filter = null, int? skip = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultPagedResultNodeItem</returns>
        ApiResponse<ApiResultPagedResultNodeItem> QueryNodesWithHttpInfo (Query query, string filter = null, int? skip = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResult</returns>
        ApiResult RemoveNode (Guid? nodeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> RemoveNodeWithHttpInfo (Guid? nodeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <returns>ApiResult</returns>
        ApiResult RemoveTag (Guid? nodeId, Guid? tagId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> RemoveTagWithHttpInfo (Guid? nodeId, Guid? tagId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="newName"> (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult Rename (Guid? nodeId = null, string newName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="newName"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> RenameWithHttpInfo (Guid? nodeId = null, string newName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultPagedResultNodeItem</returns>
        ApiResultPagedResultNodeItem SubNodesOrFilterAllSubNodes (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultPagedResultNodeItem</returns>
        ApiResponse<ApiResultPagedResultNodeItem> SubNodesOrFilterAllSubNodesWithHttpInfo (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult UpdateBlogContent (Guid? blogId, string content = null, List<string> files = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> UpdateBlogContentWithHttpInfo (Guid? blogId, string content = null, List<string> files = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResultGuid</returns>
        ApiResultGuid UpdateBlogSolution (Guid? blogId, string title = null, string content = null, List<string> files = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of ApiResultGuid</returns>
        ApiResponse<ApiResultGuid> UpdateBlogSolutionWithHttpInfo (Guid? blogId, string title = null, string content = null, List<string> files = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult UpdateNodeGroupShared (Guid? nodeId = null, bool? shared = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> UpdateNodeGroupSharedWithHttpInfo (Guid? nodeId = null, bool? shared = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="published"> (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult UpdateNodePublished (Guid? nodeId = null, DateTime? published = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="published"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> UpdateNodePublishedWithHttpInfo (Guid? nodeId = null, DateTime? published = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult UpdateNodeShared (Guid? nodeId = null, bool? shared = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> UpdateNodeSharedWithHttpInfo (Guid? nodeId = null, bool? shared = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <param name="value"> (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult UpdateTag (Guid? nodeId, Guid? tagId, string value = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <param name="value"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> UpdateTagWithHttpInfo (Guid? nodeId, Guid? tagId, string value = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="share"></param>
        /// <returns>ApiResultNodeTag</returns>
        ApiResultNodeTag UpdateWxShare (Guid? nodeId, bool? share);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="share"></param>
        /// <returns>ApiResponse of ApiResultNodeTag</returns>
        ApiResponse<ApiResultNodeTag> UpdateWxShareWithHttpInfo (Guid? nodeId, bool? share);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultPagedResultNodeItem</returns>
        System.Threading.Tasks.Task<ApiResultPagedResultNodeItem> AllLevelNodesAsync (Guid? nodeId, int? skip = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultPagedResultNodeItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultPagedResultNodeItem>> AllLevelNodesAsyncWithHttpInfo (Guid? nodeId, int? skip = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of ApiResultNodeItem</returns>
        System.Threading.Tasks.Task<ApiResultNodeItem> CreateNodeAsync (string name, string type, Guid? parentId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultNodeItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultNodeItem>> CreateNodeAsyncWithHttpInfo (string name, string type, Guid? parentId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="content"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> CreateOrUpdateBlogContentAsync (string path, string content = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="content"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> CreateOrUpdateBlogContentAsyncWithHttpInfo (string path, string content = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <param name="refId"> (optional)</param>
        /// <returns>Task of ApiResultNodeItem</returns>
        System.Threading.Tasks.Task<ApiResultNodeItem> CreateRefNodeAsync (string name = null, Guid? parentId = null, Guid? refId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <param name="refId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultNodeItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultNodeItem>> CreateRefNodeAsyncWithHttpInfo (string name = null, Guid? parentId = null, Guid? refId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> DeleteTempBlogFilesAsync (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> DeleteTempBlogFilesAsyncWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResultBlog</returns>
        System.Threading.Tasks.Task<ApiResultBlog> GetBlogAsync (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResultBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultBlog>> GetBlogAsyncWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResultBlog</returns>
        System.Threading.Tasks.Task<ApiResultBlog> GetBlogCustomSolutionAsync (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResultBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultBlog>> GetBlogCustomSolutionAsyncWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResultBlog</returns>
        System.Threading.Tasks.Task<ApiResultBlog> GetBlogDefaultSolutionAsync (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResultBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultBlog>> GetBlogDefaultSolutionAsyncWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResultIEnumerableBlog</returns>
        System.Threading.Tasks.Task<ApiResultIEnumerableBlog> GetBlogSolutionsAsync (Guid? blogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResultIEnumerableBlog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultIEnumerableBlog>> GetBlogSolutionsAsyncWithHttpInfo (Guid? blogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="tagValue"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultPagedResultNodeItem</returns>
        System.Threading.Tasks.Task<ApiResultPagedResultNodeItem> GetBlogsByTagAsync (string tag, string tagValue = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="tagValue"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultPagedResultNodeItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultPagedResultNodeItem>> GetBlogsByTagAsyncWithHttpInfo (string tag, string tagValue = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> MoveAsync (Guid? nodeId = null, Guid? folderId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> MoveAsyncWithHttpInfo (Guid? nodeId = null, Guid? folderId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultNodeDir</returns>
        System.Threading.Tasks.Task<ApiResultNodeDir> NodeDirAsync (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultNodeDir)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultNodeDir>> NodeDirAsyncWithHttpInfo (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>Task of ApiResultIEnumerableNodeItem</returns>
        System.Threading.Tasks.Task<ApiResultIEnumerableNodeItem> PathNodesAsync (Guid? nodeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>Task of ApiResponse (ApiResultIEnumerableNodeItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultIEnumerableNodeItem>> PathNodesAsyncWithHttpInfo (Guid? nodeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultPagedResultNodeItem</returns>
        System.Threading.Tasks.Task<ApiResultPagedResultNodeItem> QueryNodesAsync (Query query, string filter = null, int? skip = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultPagedResultNodeItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultPagedResultNodeItem>> QueryNodesAsyncWithHttpInfo (Query query, string filter = null, int? skip = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> RemoveNodeAsync (Guid? nodeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> RemoveNodeAsyncWithHttpInfo (Guid? nodeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> RemoveTagAsync (Guid? nodeId, Guid? tagId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> RemoveTagAsyncWithHttpInfo (Guid? nodeId, Guid? tagId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="newName"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> RenameAsync (Guid? nodeId = null, string newName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="newName"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> RenameAsyncWithHttpInfo (Guid? nodeId = null, string newName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultPagedResultNodeItem</returns>
        System.Threading.Tasks.Task<ApiResultPagedResultNodeItem> SubNodesOrFilterAllSubNodesAsync (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultPagedResultNodeItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultPagedResultNodeItem>> SubNodesOrFilterAllSubNodesAsyncWithHttpInfo (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> UpdateBlogContentAsync (Guid? blogId, string content = null, List<string> files = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateBlogContentAsyncWithHttpInfo (Guid? blogId, string content = null, List<string> files = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResultGuid</returns>
        System.Threading.Tasks.Task<ApiResultGuid> UpdateBlogSolutionAsync (Guid? blogId, string title = null, string content = null, List<string> files = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultGuid)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultGuid>> UpdateBlogSolutionAsyncWithHttpInfo (Guid? blogId, string title = null, string content = null, List<string> files = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> UpdateNodeGroupSharedAsync (Guid? nodeId = null, bool? shared = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateNodeGroupSharedAsyncWithHttpInfo (Guid? nodeId = null, bool? shared = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="published"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> UpdateNodePublishedAsync (Guid? nodeId = null, DateTime? published = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="published"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateNodePublishedAsyncWithHttpInfo (Guid? nodeId = null, DateTime? published = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> UpdateNodeSharedAsync (Guid? nodeId = null, bool? shared = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateNodeSharedAsyncWithHttpInfo (Guid? nodeId = null, bool? shared = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <param name="value"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> UpdateTagAsync (Guid? nodeId, Guid? tagId, string value = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <param name="value"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateTagAsyncWithHttpInfo (Guid? nodeId, Guid? tagId, string value = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="share"></param>
        /// <returns>Task of ApiResultNodeTag</returns>
        System.Threading.Tasks.Task<ApiResultNodeTag> UpdateWxShareAsync (Guid? nodeId, bool? share);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="share"></param>
        /// <returns>Task of ApiResponse (ApiResultNodeTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResultNodeTag>> UpdateWxShareAsyncWithHttpInfo (Guid? nodeId, bool? share);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NodesApi : INodesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NodesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NodesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultPagedResultNodeItem</returns>
        public ApiResultPagedResultNodeItem AllLevelNodes (Guid? nodeId, int? skip = null, int? count = null)
        {
             ApiResponse<ApiResultPagedResultNodeItem> localVarResponse = AllLevelNodesWithHttpInfo(nodeId, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultPagedResultNodeItem</returns>
        public ApiResponse< ApiResultPagedResultNodeItem > AllLevelNodesWithHttpInfo (Guid? nodeId, int? skip = null, int? count = null)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->AllLevelNodes");

            var localVarPath = "/api/Nodes/AllLevelNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllLevelNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultPagedResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultPagedResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultPagedResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultPagedResultNodeItem</returns>
        public async System.Threading.Tasks.Task<ApiResultPagedResultNodeItem> AllLevelNodesAsync (Guid? nodeId, int? skip = null, int? count = null)
        {
             ApiResponse<ApiResultPagedResultNodeItem> localVarResponse = await AllLevelNodesAsyncWithHttpInfo(nodeId, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultPagedResultNodeItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultPagedResultNodeItem>> AllLevelNodesAsyncWithHttpInfo (Guid? nodeId, int? skip = null, int? count = null)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->AllLevelNodes");

            var localVarPath = "/api/Nodes/AllLevelNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllLevelNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultPagedResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultPagedResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultPagedResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>ApiResultNodeItem</returns>
        public ApiResultNodeItem CreateNode (string name, string type, Guid? parentId = null)
        {
             ApiResponse<ApiResultNodeItem> localVarResponse = CreateNodeWithHttpInfo(name, type, parentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>ApiResponse of ApiResultNodeItem</returns>
        public ApiResponse< ApiResultNodeItem > CreateNodeWithHttpInfo (string name, string type, Guid? parentId = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling NodesApi->CreateNode");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling NodesApi->CreateNode");

            var localVarPath = "/api/Nodes/CreateNode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of ApiResultNodeItem</returns>
        public async System.Threading.Tasks.Task<ApiResultNodeItem> CreateNodeAsync (string name, string type, Guid? parentId = null)
        {
             ApiResponse<ApiResultNodeItem> localVarResponse = await CreateNodeAsyncWithHttpInfo(name, type, parentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultNodeItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultNodeItem>> CreateNodeAsyncWithHttpInfo (string name, string type, Guid? parentId = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling NodesApi->CreateNode");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling NodesApi->CreateNode");

            var localVarPath = "/api/Nodes/CreateNode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="content"> (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult CreateOrUpdateBlogContent (string path, string content = null)
        {
             ApiResponse<ApiResult> localVarResponse = CreateOrUpdateBlogContentWithHttpInfo(path, content);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="content"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > CreateOrUpdateBlogContentWithHttpInfo (string path, string content = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling NodesApi->CreateOrUpdateBlogContent");

            var localVarPath = "/api/Nodes/CreateOrUpdateBlogContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateBlogContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="content"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> CreateOrUpdateBlogContentAsync (string path, string content = null)
        {
             ApiResponse<ApiResult> localVarResponse = await CreateOrUpdateBlogContentAsyncWithHttpInfo(path, content);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="content"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> CreateOrUpdateBlogContentAsyncWithHttpInfo (string path, string content = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling NodesApi->CreateOrUpdateBlogContent");

            var localVarPath = "/api/Nodes/CreateOrUpdateBlogContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateBlogContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <param name="refId"> (optional)</param>
        /// <returns>ApiResultNodeItem</returns>
        public ApiResultNodeItem CreateRefNode (string name = null, Guid? parentId = null, Guid? refId = null)
        {
             ApiResponse<ApiResultNodeItem> localVarResponse = CreateRefNodeWithHttpInfo(name, parentId, refId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <param name="refId"> (optional)</param>
        /// <returns>ApiResponse of ApiResultNodeItem</returns>
        public ApiResponse< ApiResultNodeItem > CreateRefNodeWithHttpInfo (string name = null, Guid? parentId = null, Guid? refId = null)
        {

            var localVarPath = "/api/Nodes/CreateRefNode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (refId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refId", refId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRefNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <param name="refId"> (optional)</param>
        /// <returns>Task of ApiResultNodeItem</returns>
        public async System.Threading.Tasks.Task<ApiResultNodeItem> CreateRefNodeAsync (string name = null, Guid? parentId = null, Guid? refId = null)
        {
             ApiResponse<ApiResultNodeItem> localVarResponse = await CreateRefNodeAsyncWithHttpInfo(name, parentId, refId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <param name="refId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultNodeItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultNodeItem>> CreateRefNodeAsyncWithHttpInfo (string name = null, Guid? parentId = null, Guid? refId = null)
        {

            var localVarPath = "/api/Nodes/CreateRefNode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (refId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refId", refId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRefNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResult</returns>
        public ApiResult DeleteTempBlogFiles (Guid? blogId)
        {
             ApiResponse<ApiResult> localVarResponse = DeleteTempBlogFilesWithHttpInfo(blogId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > DeleteTempBlogFilesWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->DeleteTempBlogFiles");

            var localVarPath = "/api/Nodes/DeleteTempBlogFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTempBlogFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> DeleteTempBlogFilesAsync (Guid? blogId)
        {
             ApiResponse<ApiResult> localVarResponse = await DeleteTempBlogFilesAsyncWithHttpInfo(blogId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> DeleteTempBlogFilesAsyncWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->DeleteTempBlogFiles");

            var localVarPath = "/api/Nodes/DeleteTempBlogFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTempBlogFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResultBlog</returns>
        public ApiResultBlog GetBlog (Guid? blogId)
        {
             ApiResponse<ApiResultBlog> localVarResponse = GetBlogWithHttpInfo(blogId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResultBlog</returns>
        public ApiResponse< ApiResultBlog > GetBlogWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->GetBlog");

            var localVarPath = "/api/Nodes/GetBlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultBlog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultBlog)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResultBlog</returns>
        public async System.Threading.Tasks.Task<ApiResultBlog> GetBlogAsync (Guid? blogId)
        {
             ApiResponse<ApiResultBlog> localVarResponse = await GetBlogAsyncWithHttpInfo(blogId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResultBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultBlog>> GetBlogAsyncWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->GetBlog");

            var localVarPath = "/api/Nodes/GetBlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultBlog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultBlog)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResultBlog</returns>
        public ApiResultBlog GetBlogCustomSolution (Guid? blogId)
        {
             ApiResponse<ApiResultBlog> localVarResponse = GetBlogCustomSolutionWithHttpInfo(blogId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResultBlog</returns>
        public ApiResponse< ApiResultBlog > GetBlogCustomSolutionWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->GetBlogCustomSolution");

            var localVarPath = "/api/Nodes/GetBlogCustomSolution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogCustomSolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultBlog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultBlog)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResultBlog</returns>
        public async System.Threading.Tasks.Task<ApiResultBlog> GetBlogCustomSolutionAsync (Guid? blogId)
        {
             ApiResponse<ApiResultBlog> localVarResponse = await GetBlogCustomSolutionAsyncWithHttpInfo(blogId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResultBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultBlog>> GetBlogCustomSolutionAsyncWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->GetBlogCustomSolution");

            var localVarPath = "/api/Nodes/GetBlogCustomSolution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogCustomSolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultBlog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultBlog)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResultBlog</returns>
        public ApiResultBlog GetBlogDefaultSolution (Guid? blogId)
        {
             ApiResponse<ApiResultBlog> localVarResponse = GetBlogDefaultSolutionWithHttpInfo(blogId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResultBlog</returns>
        public ApiResponse< ApiResultBlog > GetBlogDefaultSolutionWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->GetBlogDefaultSolution");

            var localVarPath = "/api/Nodes/GetBlogDefaultSolution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogDefaultSolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultBlog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultBlog)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResultBlog</returns>
        public async System.Threading.Tasks.Task<ApiResultBlog> GetBlogDefaultSolutionAsync (Guid? blogId)
        {
             ApiResponse<ApiResultBlog> localVarResponse = await GetBlogDefaultSolutionAsyncWithHttpInfo(blogId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResultBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultBlog>> GetBlogDefaultSolutionAsyncWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->GetBlogDefaultSolution");

            var localVarPath = "/api/Nodes/GetBlogDefaultSolution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogDefaultSolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultBlog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultBlog)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResultIEnumerableBlog</returns>
        public ApiResultIEnumerableBlog GetBlogSolutions (Guid? blogId)
        {
             ApiResponse<ApiResultIEnumerableBlog> localVarResponse = GetBlogSolutionsWithHttpInfo(blogId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>ApiResponse of ApiResultIEnumerableBlog</returns>
        public ApiResponse< ApiResultIEnumerableBlog > GetBlogSolutionsWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->GetBlogSolutions");

            var localVarPath = "/api/Nodes/GetBlogSolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogSolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultIEnumerableBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultIEnumerableBlog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultIEnumerableBlog)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResultIEnumerableBlog</returns>
        public async System.Threading.Tasks.Task<ApiResultIEnumerableBlog> GetBlogSolutionsAsync (Guid? blogId)
        {
             ApiResponse<ApiResultIEnumerableBlog> localVarResponse = await GetBlogSolutionsAsyncWithHttpInfo(blogId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <returns>Task of ApiResponse (ApiResultIEnumerableBlog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultIEnumerableBlog>> GetBlogSolutionsAsyncWithHttpInfo (Guid? blogId)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->GetBlogSolutions");

            var localVarPath = "/api/Nodes/GetBlogSolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogSolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultIEnumerableBlog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultIEnumerableBlog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultIEnumerableBlog)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="tagValue"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultPagedResultNodeItem</returns>
        public ApiResultPagedResultNodeItem GetBlogsByTag (string tag, string tagValue = null, int? count = null)
        {
             ApiResponse<ApiResultPagedResultNodeItem> localVarResponse = GetBlogsByTagWithHttpInfo(tag, tagValue, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="tagValue"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultPagedResultNodeItem</returns>
        public ApiResponse< ApiResultPagedResultNodeItem > GetBlogsByTagWithHttpInfo (string tag, string tagValue = null, int? count = null)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling NodesApi->GetBlogsByTag");

            var localVarPath = "/api/Nodes/GetBlogsByTag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (tagValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagValue", tagValue)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogsByTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultPagedResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultPagedResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultPagedResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="tagValue"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultPagedResultNodeItem</returns>
        public async System.Threading.Tasks.Task<ApiResultPagedResultNodeItem> GetBlogsByTagAsync (string tag, string tagValue = null, int? count = null)
        {
             ApiResponse<ApiResultPagedResultNodeItem> localVarResponse = await GetBlogsByTagAsyncWithHttpInfo(tag, tagValue, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag"></param>
        /// <param name="tagValue"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultPagedResultNodeItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultPagedResultNodeItem>> GetBlogsByTagAsyncWithHttpInfo (string tag, string tagValue = null, int? count = null)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling NodesApi->GetBlogsByTag");

            var localVarPath = "/api/Nodes/GetBlogsByTag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (tagValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagValue", tagValue)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogsByTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultPagedResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultPagedResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultPagedResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult Move (Guid? nodeId = null, Guid? folderId = null)
        {
             ApiResponse<ApiResult> localVarResponse = MoveWithHttpInfo(nodeId, folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > MoveWithHttpInfo (Guid? nodeId = null, Guid? folderId = null)
        {

            var localVarPath = "/api/Nodes/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Move", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> MoveAsync (Guid? nodeId = null, Guid? folderId = null)
        {
             ApiResponse<ApiResult> localVarResponse = await MoveAsyncWithHttpInfo(nodeId, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="folderId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> MoveAsyncWithHttpInfo (Guid? nodeId = null, Guid? folderId = null)
        {

            var localVarPath = "/api/Nodes/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (folderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderId", folderId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Move", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultNodeDir</returns>
        public ApiResultNodeDir NodeDir (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null)
        {
             ApiResponse<ApiResultNodeDir> localVarResponse = NodeDirWithHttpInfo(nodeId, filter, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultNodeDir</returns>
        public ApiResponse< ApiResultNodeDir > NodeDirWithHttpInfo (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null)
        {

            var localVarPath = "/api/Nodes/NodeDir";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NodeDir", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultNodeDir>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultNodeDir) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultNodeDir)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultNodeDir</returns>
        public async System.Threading.Tasks.Task<ApiResultNodeDir> NodeDirAsync (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null)
        {
             ApiResponse<ApiResultNodeDir> localVarResponse = await NodeDirAsyncWithHttpInfo(nodeId, filter, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultNodeDir)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultNodeDir>> NodeDirAsyncWithHttpInfo (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null)
        {

            var localVarPath = "/api/Nodes/NodeDir";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NodeDir", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultNodeDir>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultNodeDir) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultNodeDir)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResultIEnumerableNodeItem</returns>
        public ApiResultIEnumerableNodeItem PathNodes (Guid? nodeId)
        {
             ApiResponse<ApiResultIEnumerableNodeItem> localVarResponse = PathNodesWithHttpInfo(nodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResponse of ApiResultIEnumerableNodeItem</returns>
        public ApiResponse< ApiResultIEnumerableNodeItem > PathNodesWithHttpInfo (Guid? nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->PathNodes");

            var localVarPath = "/api/Nodes/PathNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PathNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultIEnumerableNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultIEnumerableNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultIEnumerableNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>Task of ApiResultIEnumerableNodeItem</returns>
        public async System.Threading.Tasks.Task<ApiResultIEnumerableNodeItem> PathNodesAsync (Guid? nodeId)
        {
             ApiResponse<ApiResultIEnumerableNodeItem> localVarResponse = await PathNodesAsyncWithHttpInfo(nodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>Task of ApiResponse (ApiResultIEnumerableNodeItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultIEnumerableNodeItem>> PathNodesAsyncWithHttpInfo (Guid? nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->PathNodes");

            var localVarPath = "/api/Nodes/PathNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PathNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultIEnumerableNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultIEnumerableNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultIEnumerableNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultPagedResultNodeItem</returns>
        public ApiResultPagedResultNodeItem QueryNodes (Query query, string filter = null, int? skip = null, int? count = null)
        {
             ApiResponse<ApiResultPagedResultNodeItem> localVarResponse = QueryNodesWithHttpInfo(query, filter, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultPagedResultNodeItem</returns>
        public ApiResponse< ApiResultPagedResultNodeItem > QueryNodesWithHttpInfo (Query query, string filter = null, int? skip = null, int? count = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling NodesApi->QueryNodes");

            var localVarPath = "/api/Nodes/QueryNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultPagedResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultPagedResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultPagedResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultPagedResultNodeItem</returns>
        public async System.Threading.Tasks.Task<ApiResultPagedResultNodeItem> QueryNodesAsync (Query query, string filter = null, int? skip = null, int? count = null)
        {
             ApiResponse<ApiResultPagedResultNodeItem> localVarResponse = await QueryNodesAsyncWithHttpInfo(query, filter, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultPagedResultNodeItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultPagedResultNodeItem>> QueryNodesAsyncWithHttpInfo (Query query, string filter = null, int? skip = null, int? count = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling NodesApi->QueryNodes");

            var localVarPath = "/api/Nodes/QueryNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultPagedResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultPagedResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultPagedResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResult</returns>
        public ApiResult RemoveNode (Guid? nodeId)
        {
             ApiResponse<ApiResult> localVarResponse = RemoveNodeWithHttpInfo(nodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > RemoveNodeWithHttpInfo (Guid? nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->RemoveNode");

            var localVarPath = "/api/Nodes/RemoveNode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> RemoveNodeAsync (Guid? nodeId)
        {
             ApiResponse<ApiResult> localVarResponse = await RemoveNodeAsyncWithHttpInfo(nodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> RemoveNodeAsyncWithHttpInfo (Guid? nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->RemoveNode");

            var localVarPath = "/api/Nodes/RemoveNode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <returns>ApiResult</returns>
        public ApiResult RemoveTag (Guid? nodeId, Guid? tagId)
        {
             ApiResponse<ApiResult> localVarResponse = RemoveTagWithHttpInfo(nodeId, tagId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > RemoveTagWithHttpInfo (Guid? nodeId, Guid? tagId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->RemoveTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling NodesApi->RemoveTag");

            var localVarPath = "/api/Nodes/RemoveTag/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagId", tagId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> RemoveTagAsync (Guid? nodeId, Guid? tagId)
        {
             ApiResponse<ApiResult> localVarResponse = await RemoveTagAsyncWithHttpInfo(nodeId, tagId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> RemoveTagAsyncWithHttpInfo (Guid? nodeId, Guid? tagId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->RemoveTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling NodesApi->RemoveTag");

            var localVarPath = "/api/Nodes/RemoveTag/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagId", tagId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="newName"> (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult Rename (Guid? nodeId = null, string newName = null)
        {
             ApiResponse<ApiResult> localVarResponse = RenameWithHttpInfo(nodeId, newName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="newName"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > RenameWithHttpInfo (Guid? nodeId = null, string newName = null)
        {

            var localVarPath = "/api/Nodes/Rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (newName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newName", newName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Rename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="newName"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> RenameAsync (Guid? nodeId = null, string newName = null)
        {
             ApiResponse<ApiResult> localVarResponse = await RenameAsyncWithHttpInfo(nodeId, newName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="newName"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> RenameAsyncWithHttpInfo (Guid? nodeId = null, string newName = null)
        {

            var localVarPath = "/api/Nodes/Rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (newName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newName", newName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Rename", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResultPagedResultNodeItem</returns>
        public ApiResultPagedResultNodeItem SubNodesOrFilterAllSubNodes (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null)
        {
             ApiResponse<ApiResultPagedResultNodeItem> localVarResponse = SubNodesOrFilterAllSubNodesWithHttpInfo(nodeId, filter, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of ApiResultPagedResultNodeItem</returns>
        public ApiResponse< ApiResultPagedResultNodeItem > SubNodesOrFilterAllSubNodesWithHttpInfo (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null)
        {

            var localVarPath = "/api/Nodes/SubNodesOrFilterAllSubNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubNodesOrFilterAllSubNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultPagedResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultPagedResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultPagedResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResultPagedResultNodeItem</returns>
        public async System.Threading.Tasks.Task<ApiResultPagedResultNodeItem> SubNodesOrFilterAllSubNodesAsync (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null)
        {
             ApiResponse<ApiResultPagedResultNodeItem> localVarResponse = await SubNodesOrFilterAllSubNodesAsyncWithHttpInfo(nodeId, filter, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultPagedResultNodeItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultPagedResultNodeItem>> SubNodesOrFilterAllSubNodesAsyncWithHttpInfo (Guid? nodeId = null, string filter = null, int? skip = null, int? count = null)
        {

            var localVarPath = "/api/Nodes/SubNodesOrFilterAllSubNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubNodesOrFilterAllSubNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultPagedResultNodeItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultPagedResultNodeItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultPagedResultNodeItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult UpdateBlogContent (Guid? blogId, string content = null, List<string> files = null)
        {
             ApiResponse<ApiResult> localVarResponse = UpdateBlogContentWithHttpInfo(blogId, content, files);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > UpdateBlogContentWithHttpInfo (Guid? blogId, string content = null, List<string> files = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->UpdateBlogContent");

            var localVarPath = "/api/Nodes/UpdateBlogContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter
            if (files != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "files", files)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlogContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> UpdateBlogContentAsync (Guid? blogId, string content = null, List<string> files = null)
        {
             ApiResponse<ApiResult> localVarResponse = await UpdateBlogContentAsyncWithHttpInfo(blogId, content, files);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateBlogContentAsyncWithHttpInfo (Guid? blogId, string content = null, List<string> files = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->UpdateBlogContent");

            var localVarPath = "/api/Nodes/UpdateBlogContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter
            if (files != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "files", files)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlogContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResultGuid</returns>
        public ApiResultGuid UpdateBlogSolution (Guid? blogId, string title = null, string content = null, List<string> files = null)
        {
             ApiResponse<ApiResultGuid> localVarResponse = UpdateBlogSolutionWithHttpInfo(blogId, title, content, files);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of ApiResultGuid</returns>
        public ApiResponse< ApiResultGuid > UpdateBlogSolutionWithHttpInfo (Guid? blogId, string title = null, string content = null, List<string> files = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->UpdateBlogSolution");

            var localVarPath = "/api/Nodes/UpdateBlogSolution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (files != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "files", files)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlogSolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultGuid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultGuid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultGuid)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResultGuid</returns>
        public async System.Threading.Tasks.Task<ApiResultGuid> UpdateBlogSolutionAsync (Guid? blogId, string title = null, string content = null, List<string> files = null)
        {
             ApiResponse<ApiResultGuid> localVarResponse = await UpdateBlogSolutionAsyncWithHttpInfo(blogId, title, content, files);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogId"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResultGuid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultGuid>> UpdateBlogSolutionAsyncWithHttpInfo (Guid? blogId, string title = null, string content = null, List<string> files = null)
        {
            // verify the required parameter 'blogId' is set
            if (blogId == null)
                throw new ApiException(400, "Missing required parameter 'blogId' when calling NodesApi->UpdateBlogSolution");

            var localVarPath = "/api/Nodes/UpdateBlogSolution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blogId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blogId", blogId)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (files != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "files", files)); // query parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBlogSolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultGuid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultGuid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultGuid)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult UpdateNodeGroupShared (Guid? nodeId = null, bool? shared = null)
        {
             ApiResponse<ApiResult> localVarResponse = UpdateNodeGroupSharedWithHttpInfo(nodeId, shared);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > UpdateNodeGroupSharedWithHttpInfo (Guid? nodeId = null, bool? shared = null)
        {

            var localVarPath = "/api/Nodes/UpdateNodeGroupShared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodeGroupShared", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> UpdateNodeGroupSharedAsync (Guid? nodeId = null, bool? shared = null)
        {
             ApiResponse<ApiResult> localVarResponse = await UpdateNodeGroupSharedAsyncWithHttpInfo(nodeId, shared);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateNodeGroupSharedAsyncWithHttpInfo (Guid? nodeId = null, bool? shared = null)
        {

            var localVarPath = "/api/Nodes/UpdateNodeGroupShared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodeGroupShared", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="published"> (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult UpdateNodePublished (Guid? nodeId = null, DateTime? published = null)
        {
             ApiResponse<ApiResult> localVarResponse = UpdateNodePublishedWithHttpInfo(nodeId, published);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="published"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > UpdateNodePublishedWithHttpInfo (Guid? nodeId = null, DateTime? published = null)
        {

            var localVarPath = "/api/Nodes/UpdateNodePublished";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (published != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "published", published)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodePublished", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="published"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> UpdateNodePublishedAsync (Guid? nodeId = null, DateTime? published = null)
        {
             ApiResponse<ApiResult> localVarResponse = await UpdateNodePublishedAsyncWithHttpInfo(nodeId, published);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="published"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateNodePublishedAsyncWithHttpInfo (Guid? nodeId = null, DateTime? published = null)
        {

            var localVarPath = "/api/Nodes/UpdateNodePublished";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (published != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "published", published)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodePublished", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult UpdateNodeShared (Guid? nodeId = null, bool? shared = null)
        {
             ApiResponse<ApiResult> localVarResponse = UpdateNodeSharedWithHttpInfo(nodeId, shared);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > UpdateNodeSharedWithHttpInfo (Guid? nodeId = null, bool? shared = null)
        {

            var localVarPath = "/api/Nodes/UpdateNodeShared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodeShared", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> UpdateNodeSharedAsync (Guid? nodeId = null, bool? shared = null)
        {
             ApiResponse<ApiResult> localVarResponse = await UpdateNodeSharedAsyncWithHttpInfo(nodeId, shared);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"> (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateNodeSharedAsyncWithHttpInfo (Guid? nodeId = null, bool? shared = null)
        {

            var localVarPath = "/api/Nodes/UpdateNodeShared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodeShared", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <param name="value"> (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult UpdateTag (Guid? nodeId, Guid? tagId, string value = null)
        {
             ApiResponse<ApiResult> localVarResponse = UpdateTagWithHttpInfo(nodeId, tagId, value);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <param name="value"> (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > UpdateTagWithHttpInfo (Guid? nodeId, Guid? tagId, string value = null)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->UpdateTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling NodesApi->UpdateTag");

            var localVarPath = "/api/Nodes/UpdateTag/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagId", tagId)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <param name="value"> (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> UpdateTagAsync (Guid? nodeId, Guid? tagId, string value = null)
        {
             ApiResponse<ApiResult> localVarResponse = await UpdateTagAsyncWithHttpInfo(nodeId, tagId, value);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="tagId"></param>
        /// <param name="value"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> UpdateTagAsyncWithHttpInfo (Guid? nodeId, Guid? tagId, string value = null)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->UpdateTag");
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling NodesApi->UpdateTag");

            var localVarPath = "/api/Nodes/UpdateTag/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (tagId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagId", tagId)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="share"></param>
        /// <returns>ApiResultNodeTag</returns>
        public ApiResultNodeTag UpdateWxShare (Guid? nodeId, bool? share)
        {
             ApiResponse<ApiResultNodeTag> localVarResponse = UpdateWxShareWithHttpInfo(nodeId, share);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="share"></param>
        /// <returns>ApiResponse of ApiResultNodeTag</returns>
        public ApiResponse< ApiResultNodeTag > UpdateWxShareWithHttpInfo (Guid? nodeId, bool? share)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->UpdateWxShare");
            // verify the required parameter 'share' is set
            if (share == null)
                throw new ApiException(400, "Missing required parameter 'share' when calling NodesApi->UpdateWxShare");

            var localVarPath = "/api/Nodes/UpdateWxShare/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (share != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "share", share)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWxShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultNodeTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultNodeTag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultNodeTag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="share"></param>
        /// <returns>Task of ApiResultNodeTag</returns>
        public async System.Threading.Tasks.Task<ApiResultNodeTag> UpdateWxShareAsync (Guid? nodeId, bool? share)
        {
             ApiResponse<ApiResultNodeTag> localVarResponse = await UpdateWxShareAsyncWithHttpInfo(nodeId, share);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId"></param>
        /// <param name="share"></param>
        /// <returns>Task of ApiResponse (ApiResultNodeTag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResultNodeTag>> UpdateWxShareAsyncWithHttpInfo (Guid? nodeId, bool? share)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling NodesApi->UpdateWxShare");
            // verify the required parameter 'share' is set
            if (share == null)
                throw new ApiException(400, "Missing required parameter 'share' when calling NodesApi->UpdateWxShare");

            var localVarPath = "/api/Nodes/UpdateWxShare/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodeId", nodeId)); // query parameter
            if (share != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "share", share)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWxShare", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResultNodeTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResultNodeTag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResultNodeTag)));
        }

    }
}
